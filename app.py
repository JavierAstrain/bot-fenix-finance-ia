import streamlit as st
import pandas as pd
import gspread
import json
import requests
from google.oauth2.service_account import Credentials

# --- CREDENCIALES GOOGLE DESDE SECRETS ---
try:
    creds_dict = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
    scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
    creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
    client = gspread.authorize(creds)
except KeyError:
    st.error("‚ùå GOOGLE_CREDENTIALS no encontradas en st.secrets. Aseg√∫rate de configurarlas correctamente.")
    st.stop()
except Exception as e:
    st.error("‚ùå Error al cargar las credenciales de Google.")
    st.exception(e)
    st.stop()


# --- CARGA DATOS DESDE GOOGLE SHEET ---
SHEET_URL = "https://docs.google.com/spreadsheets/d/1mXxUmIQ44rd9escHOee2w0LxGs4MVNXaPrUeqj4USpk"

try:
    sheet = client.open_by_url(SHEET_URL).sheet1
    data = sheet.get_all_values()
    df = pd.DataFrame(data[1:], columns=data[0])
    df["Fecha"] = pd.to_datetime(df["Fecha"], errors="coerce")
    df["Monto Facturado"] = pd.to_numeric(df["Monto Facturado"], errors="coerce")

    # --- UI ---
    st.title("ü§ñ Bot F√©nix Finance IA")
    st.write("Haz preguntas en lenguaje natural sobre tu informaci√≥n financiera.")
    st.subheader("üìä Vista previa:")
    st.dataframe(df.head(10))

    st.subheader("üí¨ ¬øQu√© deseas saber?")
    pregunta = st.text_input("Ej: ¬øCu√°les fueron las ventas del a√±o 2025?")

    if pregunta:
        # --- Contexto mejorado para an√°lisis, predicciones y recomendaciones ---
        contexto = f"""Eres un asistente de IA especializado en an√°lisis financiero. Tu misi√≥n es ayudar al usuario a interpretar sus datos, identificar tendencias, predecir posibles escenarios (con cautela) y ofrecer recomendaciones estrat√©gicas.

        Aqu√≠ est√°n las **primeras 20 filas** de los datos financieros disponibles para tu an√°lisis:

        {df.head(20).to_string(index=False)}

        Bas√°ndote **exclusivamente** en la informaci√≥n proporcionada y en tu rol de analista financiero, por favor, responde a la siguiente pregunta del usuario.

        Al formular tu respuesta, considera lo siguiente:
        1.  **An√°lisis:** Busca patrones, anomal√≠as, crecimientos o decrecimientos significativos.
        2.  **Predicci√≥n (si aplica):** Si la pregunta sugiere una proyecci√≥n, basa tu estimaci√≥n en las tendencias hist√≥ricas visibles en los datos. **IMPORTANTE: Siempre aclara que cualquier predicci√≥n es una estimaci√≥n basada en datos pasados y no una garant√≠a ni un consejo financiero.**
        3.  **Recomendaciones:** Ofrece consejos pr√°cticos y accionables que el usuario pueda considerar para mejorar su situaci√≥n financiera, siempre fundamentados en el an√°lisis de los datos.
        4.  **Tono:** Mant√©n un tono profesional, claro, conciso y emp√°tico.
        5.  **Idioma:** Responde siempre en espa√±ol.

        ---
        Pregunta del usuario:
        {pregunta}
        """

        # --- Configuraci√≥n para la API de Google Gemini ---
        try:
            google_gemini_api_key = st.secrets["GOOGLE_GEMINI_API_KEY"]
        except KeyError:
            st.error("‚ùå GOOGLE_GEMINI_API_KEY no encontrada en st.secrets. Por favor, config√∫rala en .streamlit/secrets.toml")
            st.stop()

        api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={google_gemini_api_key}"

        payload = {
            "contents": [
                {
                    "role": "user",
                    "parts": [
                        {"text": contexto}
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.3
            }
        }

        headers = {
            "Content-Type": "application/json"
        }

        try:
            with st.spinner("Consultando IA de Google Gemini..."):
                response = requests.post(
                    api_url,
                    headers=headers,
                    json=payload
                )
                if response.status_code == 200:
                    response_data = response.json()
                    if response_data and "candidates" in response_data and len(response_data["candidates"]) > 0:
                        content = response_data["candidates"][0]["content"]["parts"][0]["text"]
                        st.success("ü§ñ Respuesta de Gemini:")
                        st.write(content)
                    else:
                        st.error("‚ùå No se recibi√≥ una respuesta v√°lida de Gemini.")
                        st.text(response.text)
                else:
                    st.error(f"‚ùå Error al consultar Gemini API: {response.status_code}")
                    st.text(response.text)
        except Exception as e:
            st.error("‚ùå Fall√≥ la conexi√≥n con la API de Gemini.")
            st.exception(e)

except Exception as e:
    st.error("‚ùå No se pudo cargar la hoja de c√°lculo.")
    st.exception(e)

